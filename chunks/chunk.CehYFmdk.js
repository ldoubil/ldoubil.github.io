import{_ as w,av as F,aw as Y,ax as _,ay as H,l as i,c as V,az as z,aA as U,ah as $,am as q,ai as P,ag as K,aB as Q,aC as W,aD as Z}from"../entry.CR1uukld.js";import{G as B}from"./chunk.DjjvB_4j.js";import{l as I}from"./chunk.BQWwO-nm.js";import{i as b}from"./chunk.R60deg7B.js";import{c as L}from"./chunk.zTUE3_xG.js";import{m as A}from"./chunk.BXvpF2dG.js";import"./chunk.CLcXU_4U.js";import"./chunk.CqkleIqs.js";function h(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:ee(e),edges:ne(e)};return b(e.graph())||(n.value=L(e.graph())),n}function ee(e){return A(e.nodes(),(function(n){var t=e.node(n),i=e.parent(n),r={v:n};return b(t)||(r.value=t),b(i)||(r.parent=i),r}))}function ne(e){return A(e.edges(),(function(n){var t=e.edge(n),i={v:n.v,w:n.w};return b(n.name)||(i.name=n.name),b(t)||(i.value=t),i}))}var d=new Map,p=new Map,J=new Map,te=w((()=>{p.clear(),J.clear(),d.clear()}),"clear"),D=w(((e,n)=>{const t=p.get(n)||[];return i.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)}),"isDescendant"),se=w(((e,n)=>{const t=p.get(n)||[];return i.info("Descendants of ",n," is ",t),i.info("Edge is ",e),e.v!==n&&e.w!==n&&(t?t.includes(e.v)||D(e.v,n)||D(e.w,n)||t.includes(e.w):(i.debug("Tilt, ",n,",not in descendants"),!1))}),"edgeInCluster"),G=w(((e,n,t,r)=>{i.warn("Copying children of ",e,"root",r,"data",n.node(e),r);const a=n.children(e)||[];e!==r&&a.push(e),i.warn("Copying (nodes) clusterId",e,"nodes",a),a.forEach((a=>{if(n.children(a).length>0)G(a,n,t,r);else{const d=n.node(a);i.info("cp ",a," to ",r," with parent ",e),t.setNode(a,d),r!==n.parent(a)&&(i.warn("Setting parent",a,n.parent(a)),t.setParent(a,n.parent(a))),e!==r&&a!==e?(i.debug("Setting parent",a,e),t.setParent(a,e)):(i.info("In copy ",e,"root",r,"data",n.node(e),r),i.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==r,"node!==clusterId",a!==e));const o=n.edges(a);i.debug("Copying Edges",o),o.forEach((a=>{i.info("Edge",a);const d=n.edge(a.v,a.w,a.name);i.info("Edge data",d,r);try{se(a,r)?(i.info("Copying as ",a.v,a.w,d,a.name),t.setEdge(a.v,a.w,d,a.name),i.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):i.info("Skipping copy of edge ",a.v,"--\x3e",a.w," rootId: ",r," clusterId:",e)}catch(e){i.error(e)}}))}i.debug("Removing node",a),n.removeNode(a)}))}),"copy"),R=w(((e,n)=>{const t=n.children(e);let i=[...t];for(const r of t)J.set(r,e),i=[...i,...R(r,n)];return i}),"extractDescendants"),ie=w(((e,n,t)=>{const i=e.edges().filter((e=>e.v===n||e.w===n)),r=e.edges().filter((e=>e.v===t||e.w===t)),a=i.map((e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w}))),d=r.map((e=>({v:e.v,w:e.w})));return a.filter((e=>d.some((n=>e.v===n.v&&e.w===n.w))))}),"findCommonEdges"),C=w(((e,n,t)=>{const r=n.children(e);if(i.trace("Searching children of id ",e,r),r.length<1)return e;let a;for(const e of r){const i=C(e,n,t),r=ie(n,t,i);if(i){if(!(r.length>0))return i;a=i}}return a}),"findNonClusterChild"),k=w((e=>d.has(e)&&d.get(e).externalConnections&&d.has(e)?d.get(e).id:e),"getAnchorId"),re=w(((e,n)=>{if(!e||n>10)i.debug("Opting out, no graph ");else{i.debug("Opting in, graph "),e.nodes().forEach((function(n){e.children(n).length>0&&(i.warn("Cluster identified",n," Replacement id in edges: ",C(n,e,n)),p.set(n,R(n,e)),d.set(n,{id:C(n,e,n),clusterData:e.node(n)}))})),e.nodes().forEach((function(n){const t=e.children(n),r=e.edges();t.length>0?(i.debug("Cluster identified",n,p),r.forEach((e=>{D(e.v,n)^D(e.w,n)&&(i.warn("Edge: ",e," leaves cluster ",n),i.warn("Descendants of XXX ",n,": ",p.get(n)),d.get(n).externalConnections=!0)}))):i.debug("Not a cluster ",n,p)}));for(let n of d.keys()){const t=d.get(n).id,i=e.parent(t);i!==n&&d.has(i)&&!d.get(i).externalConnections&&(d.get(n).id=i)}e.edges().forEach((function(n){const t=e.edge(n);i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let r=n.v,a=n.w;if(i.warn("Fix XXX",d,"ids:",n.v,n.w,"Translating: ",d.get(n.v)," --- ",d.get(n.w)),d.get(n.v)||d.get(n.w)){if(i.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),r=k(n.v),a=k(n.w),e.removeEdge(n.v,n.w,n.name),r!==n.v){const i=e.parent(r);d.get(i).externalConnections=!0,t.fromCluster=n.v}if(a!==n.w){const i=e.parent(a);d.get(i).externalConnections=!0,t.toCluster=n.w}i.warn("Fix Replacing with XXX",r,a,n.name),e.setEdge(r,a,t,n.name)}})),i.warn("Adjusted Graph",h(e)),T(e,0),i.trace(d)}}),"adjustClustersAndEdges"),T=w(((e,n)=>{if(i.warn("extractor - ",n,h(e),e.children("D")),n>10)return void i.error("Bailing out");let t=e.nodes(),r=!1;for(const n of t){const t=e.children(n);r=r||t.length>0}if(r){i.debug("Nodes = ",t,n);for(const r of t)if(i.debug("Extracting node",r,d,d.has(r)&&!d.get(r).externalConnections,!e.parent(r),e.node(r),e.children("D")," Depth ",n),d.has(r))if(!d.get(r).externalConnections&&e.children(r)&&e.children(r).length>0){i.warn("Cluster without external connections, without a parent and with children",r,n);let t="TB"===e.graph().rankdir?"LR":"TB";d.get(r)?.clusterData?.dir&&(t=d.get(r).clusterData.dir,i.warn("Fixing dir",d.get(r).clusterData.dir,t));const a=new B({multigraph:!0,compound:!0}).setGraph({rankdir:t,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));i.warn("Old graph before copy",h(e)),G(r,e,a,r),e.setNode(r,{clusterNode:!0,id:r,clusterData:d.get(r).clusterData,label:d.get(r).label,graph:a}),i.warn("New graph after copy node: (",r,")",h(a)),i.debug("Old graph after copy",h(e))}else i.warn("Cluster ** ",r," **not meeting the criteria !externalConnections:",!d.get(r).externalConnections," no parent: ",!e.parent(r)," children ",e.children(r)&&e.children(r).length>0,e.children("D"),n),i.debug(d);else i.debug("Not a cluster",r,n);t=e.nodes(),i.warn("New list of nodes",t);for(const r of t){const t=e.node(r);i.warn(" Now next level",r,t),t?.clusterNode&&T(t.graph,n+1)}}else i.debug("Done, no node has children",e.nodes())}),"extractor"),M=w(((e,n)=>{if(0===n.length)return[];let t=Object.assign([],n);return n.forEach((n=>{const i=e.children(n),r=M(e,i);t=[...t,...r]})),t}),"sorter"),oe=w((e=>M(e,e.children())),"sortNodesByHierarchy"),j=w((async(e,n,t,r,a,o)=>{i.warn("Graph in recursive render:XAX",h(n),a);const s=n.graph().rankdir;i.trace("Dir in recursive render - dir:",s);const c=e.insert("g").attr("class","root");n.nodes()?i.info("Recursive render XXX",n.nodes()):i.info("No nodes found for",n),n.edges().length>0&&i.info("Recursive edges",n.edge(n.edges()[0]));const g=c.insert("g").attr("class","clusters"),l=c.insert("g").attr("class","edgePaths"),f=c.insert("g").attr("class","edgeLabels"),p=c.insert("g").attr("class","nodes");await Promise.all(n.nodes().map((async function(e){const c=n.node(e);if(void 0!==a){const t=JSON.parse(JSON.stringify(a.clusterData));i.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",t.height,"\nParent cluster",a.height),n.setNode(a.id,t),n.parent(e)||(i.trace("Setting parent",e,a.id),n.setParent(e,a.id,t))}if(i.info("(Insert) Node XXX"+e+": "+JSON.stringify(n.node(e))),c?.clusterNode){i.info("Cluster identified XBX",e,c.width,n.node(e));const{ranksep:a,nodesep:d}=n.graph();c.graph.setGraph({...c.graph.graph(),ranksep:a+25,nodesep:d});const s=await j(p,c.graph,t,r,n.node(e),o),g=s.elem;z(c,g),c.diff=s.diff||0,i.info("New compound node after recursive render XAX",e,"width",c.width,"height",c.height),U(g,c)}else n.children(e).length>0?(i.trace("Cluster - the non recursive path XBX",e,c.id,c,c.width,"Graph:",n),i.trace(C(c.id,n)),d.set(c.id,{id:C(c.id,n),node:c})):(i.trace("Node - the non recursive path XAX",e,p,n.node(e),s),await $(p,n.node(e),{config:o,dir:s}))}))),await w((async()=>{const e=n.edges().map((async function(e){const t=n.edge(e.v,e.w,e.name);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),i.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(n.edge(e))),i.info("Fix",d,"ids:",e.v,e.w,"Translating: ",d.get(e.v),d.get(e.w)),await Z(f,t)}));await Promise.all(e)}),"processEdges")(),i.info("Graph before layout:",JSON.stringify(h(n))),i.info("############################################# XXX"),i.info("###                Layout                 ### XXX"),i.info("############################################# XXX"),I(n),i.info("Graph after layout:",JSON.stringify(h(n)));let u=0,{subGraphTitleTotalMargin:m}=q(o);return await Promise.all(oe(n).map((async function(e){const t=n.node(e);if(i.info("Position XBX => "+e+": ("+t.x,","+t.y,") width: ",t.width," height: ",t.height),t?.clusterNode)t.y+=m,i.info("A tainted cluster node XBX1",e,t.id,t.width,t.height,t.x,t.y,n.parent(e)),d.get(t.id).node=t,P(t);else if(n.children(e).length>0){i.info("A pure cluster node XBX1",e,t.id,t.x,t.y,t.width,t.height,n.parent(e)),t.height+=m,n.node(t.parentId);const r=t?.padding/2||0,a=t?.labelBBox?.height||0,o=a-r||0;i.debug("OffsetY",o,"labelHeight",a,"halfPadding",r),await K(g,t),d.get(t.id).node=t}else{const e=n.node(t.parentId);t.y+=m/2,i.info("A regular node XBX1 - using the padding",t.id,"parent",t.parentId,t.width,t.height,t.x,t.y,"offsetY",t.offsetY,"parent",e,e?.offsetY,t),P(t)}}))),n.edges().forEach((function(e){const a=n.edge(e);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(a),a),a.points.forEach((e=>e.y+=m/2));const o=n.node(e.v);var s=n.node(e.w);const c=Q(l,a,d,t,o,s,r);W(a,c)})),n.nodes().forEach((function(e){const t=n.node(e);i.info(e,t.type,t.diff),t.isGroup&&(u=t.diff)})),i.warn("Returning from recursive render XAX",c,u),{elem:c,diff:u}}),"recursiveRender"),me=w((async(e,n)=>{const t=new B({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}})),r=n.select("g");F(r,e.markers,e.type,e.diagramId),Y(),_(),H(),te(),e.nodes.forEach((e=>{t.setNode(e.id,{...e}),e.parentId&&t.setParent(e.id,e.parentId)})),i.debug("Edges:",e.edges),e.edges.forEach((e=>{if(e.start===e.end){const n=e.start,i=n+"---"+n+"---1",r=n+"---"+n+"---2",a=t.node(n);t.setNode(i,{domId:i,id:i,parentId:a.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),t.setParent(i,a.parentId),t.setNode(r,{domId:r,id:r,parentId:a.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),t.setParent(r,a.parentId);const d=structuredClone(e),o=structuredClone(e),s=structuredClone(e);d.label="",d.arrowTypeEnd="none",d.id=n+"-cyclic-special-1",o.arrowTypeEnd="none",o.id=n+"-cyclic-special-mid",s.label="",a.isGroup&&(d.fromCluster=n,s.toCluster=n),s.id=n+"-cyclic-special-2",t.setEdge(n,i,d,n+"-cyclic-special-0"),t.setEdge(i,r,o,n+"-cyclic-special-1"),t.setEdge(r,n,s,n+"-cyc<lic-special-2")}else t.setEdge(e.start,e.end,{...e},e.id)})),i.warn("Graph at first:",JSON.stringify(h(t))),re(t),i.warn("Graph after XAX:",JSON.stringify(h(t)));const a=V();await j(r,t,e.type,e.diagramId,void 0,a)}),"render");export{me as render};