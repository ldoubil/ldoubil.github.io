import{p as Y}from"./chunk.Dj-iznOO.js";import{I as K}from"./chunk.3Emykazr.js";import{_ as l,n as U,o as V,s as X,g as J,a as Q,b as Z,l as m,c as rr,d as er,u as tr,B as ar,v as sr,k as C,C as nr,D as or,E as cr,F as ir}from"../entry.CR1uukld.js";import{p as dr}from"./chunk.DZ8zKkHn.js";import"./chunk.CLcXU_4U.js";import"./chunk.CqkleIqs.js";import"./chunk.R60deg7B.js";import"./chunk.BXvpF2dG.js";import"./chunk.zTUE3_xG.js";var x={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},hr=cr.gitGraph,I=l((()=>nr({...hr,...or().gitGraph})),"getConfig"),c=new K((()=>{const r=I(),t=r.mainBranchName,e=r.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:e}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}}));function q(){return ir({length:7})}function z(r,t){const e=Object.create(null);return r.reduce(((r,n)=>{const o=t(n);return e[o]||(e[o]=!0,r.push(n)),r}),[])}l(q,"getID"),l(z,"uniqBy");var lr=l((function(r){c.records.direction=r}),"setDirection"),$r=l((function(r){m.debug("options str",r),r=r?.trim(),r=r||"{}";try{c.records.options=JSON.parse(r)}catch(r){m.error("error while parsing gitGraph options",r.message)}}),"setOptions"),fr=l((function(){return c.records.options}),"getOptions"),gr=l((function(r){let t=r.msg,e=r.id;const n=r.type;let o=r.tags;m.info("commit",t,e,n,o),m.debug("Entering commit:",t,e,n,o);const a=I();e=C.sanitizeText(e,a),t=C.sanitizeText(t,a),o=o?.map((r=>C.sanitizeText(r,a)));const s={id:e||c.records.seq+"-"+q(),message:t,seq:c.records.seq++,type:n??x.NORMAL,tags:o??[],parents:null==c.records.head?[]:[c.records.head.id],branch:c.records.currBranch};c.records.head=s,m.info("main branch",a.mainBranchName),c.records.commits.set(s.id,s),c.records.branches.set(c.records.currBranch,s.id),m.debug("in pushCommit "+s.id)}),"commit"),yr=l((function(r){let t=r.name;const e=r.order;if(t=C.sanitizeText(t,I()),c.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);c.records.branches.set(t,null!=c.records.head?c.records.head.id:null),c.records.branchConfig.set(t,{name:t,order:e}),D(t),m.debug("in createBranch")}),"branch"),ur=l((r=>{let t=r.branch,e=r.id;const n=r.type,o=r.tags,a=I();t=C.sanitizeText(t,a),e&&(e=C.sanitizeText(e,a));const s=c.records.branches.get(c.records.currBranch),i=c.records.branches.get(t),h=s?c.records.commits.get(s):void 0,d=i?c.records.commits.get(i):void 0;if(h&&d&&h.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(c.records.currBranch===t){const r=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},r}if(void 0===h||!h){const r=new Error(`Incorrect usage of "merge". Current branch (${c.records.currBranch})has no commits`);throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},r}if(!c.records.branches.has(t)){const r=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},r}if(void 0===d||!d){const r=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},r}if(h===d){const r=new Error('Incorrect usage of "merge". Both branches have same head');throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},r}if(e&&c.records.commits.has(e)){const r=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw r.hash={text:`merge ${t} ${e} ${n} ${o?.join(" ")}`,token:`merge ${t} ${e} ${n} ${o?.join(" ")}`,expected:[`merge ${t} ${e}_UNIQUE ${n} ${o?.join(" ")}`]},r}const $=i||"",l={id:e||`${c.records.seq}-${q()}`,message:`merged branch ${t} into ${c.records.currBranch}`,seq:c.records.seq++,parents:null==c.records.head?[]:[c.records.head.id,$],branch:c.records.currBranch,type:x.MERGE,customType:n,customId:!!e,tags:o??[]};c.records.head=l,c.records.commits.set(l.id,l),c.records.branches.set(c.records.currBranch,l.id),m.debug(c.records.branches),m.debug("in mergeBranch")}),"merge"),pr=l((function(r){let t=r.id,e=r.targetId,n=r.tags,o=r.parent;m.debug("Entering cherryPick:",t,e,n);const a=I();if(t=C.sanitizeText(t,a),e=C.sanitizeText(e,a),n=n?.map((r=>C.sanitizeText(r,a))),o=C.sanitizeText(o,a),!t||!c.records.commits.has(t)){const r=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const s=c.records.commits.get(t);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&(!Array.isArray(s.parents)||!s.parents.includes(o)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const i=s.branch;if(s.type===x.MERGE&&!o)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!e||!c.records.commits.has(e)){if(i===c.records.currBranch){const r=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const r=c.records.branches.get(c.records.currBranch);if(void 0===r||!r){const r=new Error(`Incorrect usage of "cherry-pick". Current branch (${c.records.currBranch})has no commits`);throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const a=c.records.commits.get(r);if(void 0===a||!a){const r=new Error(`Incorrect usage of "cherry-pick". Current branch (${c.records.currBranch})has no commits`);throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const h={id:c.records.seq+"-"+q(),message:`cherry-picked ${s?.message} into ${c.records.currBranch}`,seq:c.records.seq++,parents:null==c.records.head?[]:[c.records.head.id,s.id],branch:c.records.currBranch,type:x.CHERRY_PICK,tags:n?n.filter(Boolean):[`cherry-pick:${s.id}${s.type===x.MERGE?`|parent:${o}`:""}`]};c.records.head=h,c.records.commits.set(h.id,h),c.records.branches.set(c.records.currBranch,h.id),m.debug(c.records.branches),m.debug("in cherryPick")}}),"cherryPick"),D=l((function(r){if(r=C.sanitizeText(r,I()),!c.records.branches.has(r)){const t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${r}")`);throw t.hash={text:`checkout ${r}`,token:`checkout ${r}`,expected:[`branch ${r}`]},t}{c.records.currBranch=r;const t=c.records.branches.get(c.records.currBranch);c.records.head=void 0!==t&&t?c.records.commits.get(t)??null:null}}),"checkout");function H(r,t,e){const n=r.indexOf(t);-1===n?r.push(e):r.splice(n,1,e)}function P(r){const t=r.reduce(((r,t)=>r.seq>t.seq?r:t),r[0]);let e="";r.forEach((function(r){e+=r===t?"\t*":"\t|"}));const n=[e,t.id,t.seq];for(const r in c.records.branches)c.records.branches.get(r)===t.id&&n.push(r);if(m.debug(n.join(" ")),t.parents&&2==t.parents.length&&t.parents[0]&&t.parents[1]){const e=c.records.commits.get(t.parents[0]);H(r,t,e),t.parents[1]&&r.push(c.records.commits.get(t.parents[1]))}else{if(0==t.parents.length)return;if(t.parents[0]){const e=c.records.commits.get(t.parents[0]);H(r,t,e)}}P(r=z(r,(r=>r.id)))}l(H,"upsert"),l(P,"prettyPrintCommitHistory");var xr=l((function(){m.debug(c.records.commits);P([N()[0]])}),"prettyPrint"),mr=l((function(){c.reset(),sr()}),"clear"),br=l((function(){return[...c.records.branchConfig.values()].map(((r,t)=>null!==r.order&&void 0!==r.order?r:{...r,order:parseFloat(`0.${t}`)})).sort(((r,t)=>(r.order??0)-(t.order??0))).map((({name:r})=>({name:r})))}),"getBranchesAsObjArray"),wr=l((function(){return c.records.branches}),"getBranches"),vr=l((function(){return c.records.commits}),"getCommits"),N=l((function(){const r=[...c.records.commits.values()];return r.forEach((function(r){m.debug(r.id)})),r.sort(((r,t)=>r.seq-t.seq)),r}),"getCommitsArray"),Cr=l((function(){return c.records.currBranch}),"getCurrentBranch"),Er=l((function(){return c.records.direction}),"getDirection"),Tr=l((function(){return c.records.head}),"getHead"),S={commitType:x,getConfig:I,setDirection:lr,setOptions:$r,getOptions:fr,commit:gr,branch:yr,merge:ur,cherryPick:pr,checkout:D,prettyPrint:xr,clear:mr,getBranchesAsObjArray:br,getBranches:wr,getCommits:vr,getCommitsArray:N,getCurrentBranch:Cr,getDirection:Er,getHead:Tr,setAccTitle:Z,getAccTitle:Q,getAccDescription:J,setAccDescription:X,setDiagramTitle:V,getDiagramTitle:U},Br=l(((r,t)=>{Y(r,t),r.dir&&t.setDirection(r.dir);for(const e of r.statements)Lr(e,t)}),"populate"),Lr=l(((r,t)=>{const e={Commit:l((r=>t.commit(kr(r))),"Commit"),Branch:l((r=>t.branch(Mr(r))),"Branch"),Merge:l((r=>t.merge(Ir(r))),"Merge"),Checkout:l((r=>t.checkout(Rr(r))),"Checkout"),CherryPicking:l((r=>t.cherryPick(Gr(r))),"CherryPicking")}[r.$type];e?e(r):m.error(`Unknown statement type: ${r.$type}`)}),"parseStatement"),kr=l((r=>({id:r.id,msg:r.message??"",type:void 0!==r.type?x[r.type]:x.NORMAL,tags:r.tags??void 0})),"parseCommit"),Mr=l((r=>({name:r.name,order:r.order??0})),"parseBranch"),Ir=l((r=>({branch:r.branch,id:r.id??"",type:void 0!==r.type?x[r.type]:void 0,tags:r.tags??void 0})),"parseMerge"),Rr=l((r=>r.branch),"parseCheckout"),Gr=l((r=>({id:r.id,targetId:"",tags:0===r.tags?.length?void 0:r.tags,parent:r.parent})),"parseCherryPicking"),Or={parse:l((async r=>{const t=await dr("gitGraph",r);m.debug(t),Br(t,S)}),"parse")},Ar=rr(),v=Ar?.gitGraph,L=10,k=40,E=4,T=2,M=8,b=new Map,w=new Map,O=30,R=new Map,A=[],B=0,u="LR",qr=l((()=>{b.clear(),w.clear(),R.clear(),B=0,A=[],u="LR"}),"clear"),W=l((r=>{const t=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof r?r.split(/\\n|\n|<br\s*\/?>/gi):r).forEach((r=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=r.trim(),t.appendChild(e)})),t}),"drawText"),j=l((r=>{let t,e,n;return"BT"===u?(e=l(((r,t)=>r<=t),"comparisonFunc"),n=1/0):(e=l(((r,t)=>r>=t),"comparisonFunc"),n=0),r.forEach((r=>{const o="TB"===u||"BT"==u?w.get(r)?.y:w.get(r)?.x;void 0!==o&&e(o,n)&&(t=r,n=o)})),t}),"findClosestParent"),_r=l((r=>{let t="",e=1/0;return r.forEach((r=>{const n=w.get(r).y;n<=e&&(t=r,e=n)})),t||void 0}),"findClosestParentBT"),Hr=l(((r,t,e)=>{let n=e,o=e;const c=[];r.forEach((r=>{const e=t.get(r);if(!e)throw new Error(`Commit not found for key ${r}`);e.parents.length?(n=Fr(e),o=Math.max(n,o)):c.push(e),zr(e,n)})),n=o,c.forEach((r=>{Dr(r,n,e)})),r.forEach((r=>{const e=t.get(r);if(e?.parents.length){const r=_r(e.parents);n=w.get(r).y-k,n<=o&&(o=n);const t=b.get(e.branch).pos,c=n-L;w.set(e.id,{x:t,y:c})}}))}),"setParallelBTPos"),Pr=l((r=>{const t=j(r.parents.filter((r=>null!==r)));if(!t)throw new Error(`Closest parent not found for commit ${r.id}`);const e=w.get(t)?.y;if(void 0===e)throw new Error(`Closest parent position not found for commit ${r.id}`);return e}),"findClosestParentPos"),Fr=l((r=>Pr(r)+k),"calculateCommitPosition"),zr=l(((r,t)=>{const e=b.get(r.branch);if(!e)throw new Error(`Branch not found for commit ${r.id}`);const n=e.pos,o=t+L;return w.set(r.id,{x:n,y:o}),{x:n,y:o}}),"setCommitPosition"),Dr=l(((r,t,e)=>{const n=b.get(r.branch);if(!n)throw new Error(`Branch not found for commit ${r.id}`);const o=t+e,c=n.pos;w.set(r.id,{x:c,y:o})}),"setRootPosition"),Nr=l(((r,t,e,n,o,c)=>{if(c===x.HIGHLIGHT)r.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${o%M} ${n}-outer`),r.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${o%M} ${n}-inner`);else if(c===x.CHERRY_PICK)r.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${t.id} ${n}`),r.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),r.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${n}`),r.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`),r.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${n}`);else{const a=r.append("circle");if(a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",t.type===x.MERGE?9:10),a.attr("class",`commit ${t.id} commit${o%M}`),c===x.MERGE){const c=r.append("circle");c.attr("cx",e.x),c.attr("cy",e.y),c.attr("r",6),c.attr("class",`commit ${n} ${t.id} commit${o%M}`)}c===x.REVERSE&&r.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${n} ${t.id} commit${o%M}`)}}),"drawCommitBullet"),Sr=l(((r,t,e,n)=>{if(t.type!==x.CHERRY_PICK&&(t.customId&&t.type===x.MERGE||t.type!==x.MERGE)&&v?.showCommitLabel){const o=r.append("g"),c=o.insert("rect").attr("class","commit-label-bkg"),a=o.append("text").attr("x",n).attr("y",e.y+25).attr("class","commit-label").text(t.id),s=a.node()?.getBBox();if(s&&(c.attr("x",e.posWithOffset-s.width/2-T).attr("y",e.y+13.5).attr("width",s.width+2*T).attr("height",s.height+2*T),"TB"===u||"BT"===u?(c.attr("x",e.x-(s.width+4*E+5)).attr("y",e.y-12),a.attr("x",e.x-(s.width+4*E)).attr("y",e.y+s.height-12)):a.attr("x",e.posWithOffset-s.width/2),v.rotateCommitLabel))if("TB"===u||"BT"===u)a.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),c.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const r=-7.5-(s.width+10)/25*9.5,t=10+s.width/25*8.5;o.attr("transform","translate("+r+", "+t+") rotate(-45, "+n+", "+e.y+")")}}}),"drawCommitLabel"),Wr=l(((r,t,e,n)=>{if(t.tags.length>0){let o=0,c=0,a=0;const s=[];for(const n of t.tags.reverse()){const t=r.insert("polygon"),i=r.append("circle"),h=r.append("text").attr("y",e.y-16-o).attr("class","tag-label").text(n),m=h.node()?.getBBox();if(!m)throw new Error("Tag bbox not found");c=Math.max(c,m.width),a=Math.max(a,m.height),h.attr("x",e.posWithOffset-m.width/2),s.push({tag:h,hole:i,rect:t,yOffset:o}),o+=20}for(const{tag:r,hole:t,rect:o,yOffset:i}of s){const s=a/2,h=e.y-19.2-i;if(o.attr("class","tag-label-bkg").attr("points",`\n      ${n-c/2-E/2},${h+T}  \n      ${n-c/2-E/2},${h-T}\n      ${e.posWithOffset-c/2-E},${h-s-T}\n      ${e.posWithOffset+c/2+E},${h-s-T}\n      ${e.posWithOffset+c/2+E},${h+s+T}\n      ${e.posWithOffset-c/2-E},${h+s+T}`),t.attr("cy",h).attr("cx",n-c/2+E/2).attr("r",1.5).attr("class","tag-hole"),"TB"===u||"BT"===u){const a=n+i;o.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${a+2}\n        ${e.x},${a-2}\n        ${e.x+L},${a-s-2}\n        ${e.x+L+c+4},${a-s-2}\n        ${e.x+L+c+4},${a+s+2}\n        ${e.x+L},${a+s+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),t.attr("cx",e.x+E/2).attr("cy",a).attr("transform","translate(12,12) rotate(45, "+e.x+","+n+")"),r.attr("x",e.x+5).attr("y",a+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+n+")")}}}}),"drawCommitTags"),jr=l((r=>{switch(r.customType??r.type){case x.NORMAL:return"commit-normal";case x.REVERSE:return"commit-reverse";case x.HIGHLIGHT:return"commit-highlight";case x.MERGE:return"commit-merge";case x.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),Yr=l(((r,t,e,n)=>{const o={x:0,y:0};if(!(r.parents.length>0))return"TB"===t?O:"BT"===t?(n.get(r.id)??o).y-k:0;{const e=j(r.parents);if(e){const c=n.get(e)??o;return"TB"===t?c.y+k:"BT"===t?(n.get(r.id)??o).y-k:c.x+k}}return 0}),"calculatePosition"),Kr=l(((r,t,e)=>{const n="BT"===u&&e?t:t+L,o="TB"===u||"BT"===u?n:b.get(r.branch)?.pos,c="TB"===u||"BT"===u?b.get(r.branch)?.pos:n;if(void 0===c||void 0===o)throw new Error(`Position were undefined for commit ${r.id}`);return{x:c,y:o,posWithOffset:n}}),"getCommitPosition"),F=l(((r,t,e)=>{if(!v)throw new Error("GitGraph config not found");const n=r.append("g").attr("class","commit-bullets"),o=r.append("g").attr("class","commit-labels");let c="TB"===u||"BT"===u?O:0;const a=[...t.keys()],s=v?.parallelCommits??!1,i=l(((r,e)=>{const n=t.get(r)?.seq,o=t.get(e)?.seq;return void 0!==n&&void 0!==o?n-o:0}),"sortKeys");let h=a.sort(i);"BT"===u&&(s&&Hr(h,t,c),h=h.reverse()),h.forEach((r=>{const a=t.get(r);if(!a)throw new Error(`Commit not found for key ${r}`);s&&(c=Yr(a,u,c,w));const i=Kr(a,c,s);if(e){const r=jr(a),t=a.customType??a.type,e=b.get(a.branch)?.index??0;Nr(n,a,i,r,e,t),Sr(o,a,i,c),Wr(o,a,i,c)}"TB"===u||"BT"===u?w.set(a.id,{x:i.x,y:i.posWithOffset}):w.set(a.id,{x:i.posWithOffset,y:i.y}),c="BT"===u&&s?c+k:c+k+L,c>B&&(B=c)}))}),"drawCommits"),Ur=l(((r,t,e,n,o)=>{const c=("TB"===u||"BT"===u?e.x<n.x:e.y<n.y)?t.branch:r.branch,a=l((r=>r.branch===c),"isOnBranchToGetCurve"),s=l((e=>e.seq>r.seq&&e.seq<t.seq),"isBetweenCommits");return[...o.values()].some((r=>s(r)&&a(r)))}),"shouldRerouteArrow"),G=l(((r,t,e=0)=>{const n=r+Math.abs(r-t)/2;if(e>5)return n;if(A.every((r=>Math.abs(r-n)>=10)))return A.push(n),n;const o=Math.abs(r-t);return G(r,t-o/5,e+1)}),"findLane"),Vr=l(((r,t,e,n)=>{const o=w.get(t.id),c=w.get(e.id);if(void 0===o||void 0===c)throw new Error(`Commit positions not found for commits ${t.id} and ${e.id}`);const a=Ur(t,e,o,c,n);let s,i="",h="",m=0,d=0,$=b.get(e.branch)?.index;if(e.type===x.MERGE&&t.id!==e.parents[0]&&($=b.get(t.branch)?.index),a){i="A 10 10, 0, 0, 0,",h="A 10 10, 0, 0, 1,",m=10,d=10;const r=o.y<c.y?G(o.y,c.y):G(c.y,o.y),e=o.x<c.x?G(o.x,c.x):G(c.x,o.x);"TB"===u?o.x<c.x?s=`M ${o.x} ${o.y} L ${e-m} ${o.y} ${h} ${e} ${o.y+d} L ${e} ${c.y-m} ${i} ${e+d} ${c.y} L ${c.x} ${c.y}`:($=b.get(t.branch)?.index,s=`M ${o.x} ${o.y} L ${e+m} ${o.y} ${i} ${e} ${o.y+d} L ${e} ${c.y-m} ${h} ${e-d} ${c.y} L ${c.x} ${c.y}`):"BT"===u?o.x<c.x?s=`M ${o.x} ${o.y} L ${e-m} ${o.y} ${i} ${e} ${o.y-d} L ${e} ${c.y+m} ${h} ${e+d} ${c.y} L ${c.x} ${c.y}`:($=b.get(t.branch)?.index,s=`M ${o.x} ${o.y} L ${e+m} ${o.y} ${h} ${e} ${o.y-d} L ${e} ${c.y+m} ${i} ${e-d} ${c.y} L ${c.x} ${c.y}`):o.y<c.y?s=`M ${o.x} ${o.y} L ${o.x} ${r-m} ${i} ${o.x+d} ${r} L ${c.x-m} ${r} ${h} ${c.x} ${r+d} L ${c.x} ${c.y}`:($=b.get(t.branch)?.index,s=`M ${o.x} ${o.y} L ${o.x} ${r+m} ${h} ${o.x+d} ${r} L ${c.x-m} ${r} ${i} ${c.x} ${r-d} L ${c.x} ${c.y}`)}else i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",m=20,d=20,"TB"===u?(o.x<c.x&&(s=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-m} ${i} ${o.x+d} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${h} ${c.x} ${o.y+d} L ${c.x} ${c.y}`),o.x>c.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",m=20,d=20,s=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y-m} ${h} ${o.x-d} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x+m} ${o.y} ${i} ${c.x} ${o.y+d} L ${c.x} ${c.y}`),o.x===c.x&&(s=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):"BT"===u?(o.x<c.x&&(s=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+m} ${h} ${o.x+d} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${i} ${c.x} ${o.y-d} L ${c.x} ${c.y}`),o.x>c.x&&(i="A 20 20, 0, 0, 0,",h="A 20 20, 0, 0, 1,",m=20,d=20,s=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${o.x} ${o.y} L ${o.x} ${c.y+m} ${i} ${o.x-d} ${c.y} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${i} ${c.x} ${o.y-d} L ${c.x} ${c.y}`),o.x===c.x&&(s=`M ${o.x} ${o.y} L ${c.x} ${c.y}`)):(o.y<c.y&&(s=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${h} ${c.x} ${o.y+d} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y-m} ${i} ${o.x+d} ${c.y} L ${c.x} ${c.y}`),o.y>c.y&&(s=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${o.x} ${o.y} L ${c.x-m} ${o.y} ${i} ${c.x} ${o.y-d} L ${c.x} ${c.y}`:`M ${o.x} ${o.y} L ${o.x} ${c.y+m} ${h} ${o.x+d} ${c.y} L ${c.x} ${c.y}`),o.y===c.y&&(s=`M ${o.x} ${o.y} L ${c.x} ${c.y}`));if(void 0===s)throw new Error("Line definition not found");r.append("path").attr("d",s).attr("class","arrow arrow"+$%M)}),"drawArrow"),Xr=l(((r,t)=>{const e=r.append("g").attr("class","commit-arrows");[...t.keys()].forEach((r=>{const n=t.get(r);n.parents&&n.parents.length>0&&n.parents.forEach((r=>{Vr(e,t.get(r),n,t)}))}))}),"drawArrows"),Jr=l(((r,t)=>{const e=r.append("g");t.forEach(((r,t)=>{const n=t%M,o=b.get(r.name)?.pos;if(void 0===o)throw new Error(`Position not found for branch ${r.name}`);const c=e.append("line");c.attr("x1",0),c.attr("y1",o),c.attr("x2",B),c.attr("y2",o),c.attr("class","branch branch"+n),"TB"===u?(c.attr("y1",O),c.attr("x1",o),c.attr("y2",B),c.attr("x2",o)):"BT"===u&&(c.attr("y1",B),c.attr("x1",o),c.attr("y2",O),c.attr("x2",o)),A.push(o);const a=r.name,s=W(a),i=e.insert("rect"),h=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);h.node().appendChild(s);const m=s.getBBox();i.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-m.width-4-(!0===v?.rotateCommitLabel?30:0)).attr("y",-m.height/2+8).attr("width",m.width+18).attr("height",m.height+4),h.attr("transform","translate("+(-m.width-14-(!0===v?.rotateCommitLabel?30:0))+", "+(o-m.height/2-1)+")"),"TB"===u?(i.attr("x",o-m.width/2-10).attr("y",0),h.attr("transform","translate("+(o-m.width/2-5)+", 0)")):"BT"===u?(i.attr("x",o-m.width/2-10).attr("y",B),h.attr("transform","translate("+(o-m.width/2-5)+", "+B+")")):i.attr("transform","translate(-19, "+(o-m.height/2)+")")}))}),"drawBranches"),Qr=l((function(r,t,e,n,o){return b.set(r,{pos:t,index:e}),t+=50+(o?40:0)+("TB"===u||"BT"===u?n.width/2:0)}),"setBranchPosition"),Zr=l((function(r,t,e,n){if(qr(),m.debug("in gitgraph renderer",r+"\n","id:",t,e),!v)throw new Error("GitGraph config not found");const o=v.rotateCommitLabel??!1,c=n.db;R=c.getCommits();const a=c.getBranchesAsObjArray();u=c.getDirection();const s=er(`[id="${t}"]`);let i=0;a.forEach(((r,t)=>{const e=W(r.name),n=s.append("g"),c=n.insert("g").attr("class","branchLabel"),a=c.insert("g").attr("class","label branch-label");a.node()?.appendChild(e);const h=e.getBBox();i=Qr(r.name,i,t,h,o),a.remove(),c.remove(),n.remove()})),F(s,R,!1),v.showBranches&&Jr(s,a),Xr(s,R),F(s,R,!0),tr.insertTitle(s,"gitTitleText",v.titleTopMargin??0,c.getDiagramTitle()),ar(void 0,s,v.diagramPadding,v.useMaxWidth)}),"draw"),re={draw:Zr},ee=l((r=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((t=>`\n        .branch-label${t} { fill: ${r["gitBranchLabel"+t]}; }\n        .commit${t} { stroke: ${r["git"+t]}; fill: ${r["git"+t]}; }\n        .commit-highlight${t} { stroke: ${r["gitInv"+t]}; fill: ${r["gitInv"+t]}; }\n        .label${t}  { fill: ${r["git"+t]}; }\n        .arrow${t} { stroke: ${r["git"+t]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${r.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}\n  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}\n  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }\n  .tag-hole { fill: ${r.textColor}; }\n\n  .commit-merge {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${r.textColor};\n  }\n`),"getStyles"),te=ee,$e={parser:Or,db:S,renderer:re,styles:te};export{$e as diagram};